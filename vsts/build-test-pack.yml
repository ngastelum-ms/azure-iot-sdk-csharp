name: $(BuildID)_$(BuildDefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)
resources:
  - repo: self
    clean: true

jobs:

  ### Windows build ###
  - job: Windows_Test
    displayName: Windows Build
    timeoutInMinutes: 200
    strategy:
      # Change maxParallel to 1 make builds run in serial rather than in parallel
      maxParallel: 1
      matrix:
        .Net Core 3.x:
          FRAMEWORK: netcoreapp3.1
          NUGET_DROP: true

    condition: succeeded()
    pool:
      vmImage: windows-2022

    steps:
      - task: UseDotNet@2
        displayName: 'Use .NET Core SDK 2.x'
        inputs:
          packageType: sdk
          version: 2.1.x
          performMultiLevelLookup: true
          installationPath: $(Agent.ToolsDirectory)/net

      - task: UseDotNet@2
        displayName: 'Use .NET Core SDK 3.x'
        inputs:
          packageType: sdk
          version: 3.1.x
          performMultiLevelLookup: true
          installationPath: $(Agent.ToolsDirectory)/net

      - task: UseDotNet@2
        displayName: 'Use .NET SDK 5.x'
        inputs:
          packageType: sdk
          version: 5.x
          performMultiLevelLookup: true
          installationPath: $(Agent.ToolsDirectory)/net

      - task: UseDotNet@2
        displayName: 'Use .NET SDK 6.x'
        inputs:
          packageType: sdk
          version: 6.x
          performMultiLevelLookup: true
          installationPath: $(Agent.ToolsDirectory)/net

      - script: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat"
          sn -Vr *,31bf3856ad364e35
        displayName: 'Disable strong name validation'

      - task: PowerShell@2
        displayName: 'Build Packages'
        inputs:
          targetType: 'inline'
          script: |
            $env:NUGET_PKG_DATE = get-date -f yyyy-MM-dd-hh-mm-ss.f
            Write-Host Start building release package on $(Agent.Id):$(Agent.MachineName)
            $(Build.SourcesDirectory)/build.ps1 -build -clean -configuration Release -package

      - task: PowerShell@2
        displayName: 'Rename Packages for Partner Release Pipeline [azure-iot-sdk/net/pkgs_$env:NUGET_PKG_DATE]'
        condition: eq(variables['NUGET_DROP'], 'true')
        inputs:
          targetType: 'inline'
          script: |
            Rename-Item $(Build.SourcesDirectory)/bin/pkg $(Build.SourcesDirectory)/bin/pkgs_$env:NUGET_PKG_DATE
            Write-Host " "
            Write-Host "Package contents (renamed):"
            gci -Path $(Build.SourcesDirectory)/bin -Recurse -Force

      - task: AzureFileCopy@2
        displayName: 'File Copy to Partner Release Pipeline Storage'
        inputs:
          SourcePath: '$(Build.SourcesDirectory)/bin'
          azureSubscription: azuresdkpartnerdrops
          Destination: AzureBlob
          storage: azuresdkpartnerdrops
          ContainerName: 'drops/azure-iot-sdk/net'

      - task: PowerShell@2
        displayName: 'Pre-Download files'
        inputs:
          targetType: 'inline'
          script: |
            Write-Host "Download contents:"
            gci -Path $(System.DefaultWorkingDirectory)/bin -Recurse -Force

      - task: AzureCLI@2
        displayName: File Copy from Partner Release Pipeline Storage'
        inputs:
          azureSubscription: azuresdkpartnerdrops
          scriptType: ps
          scriptLocation: inlineScript
          inlineScript: |
            az storage blob download-batch --account-name azuresdkpartnerdrops --source drops/azure-iot-sdk/net/pkgs_$env:NUGET_PKG_DATE --destination $(System.DefaultWorkingDirectory)/nuget

      - task: PowerShell@2
        displayName: 'Downloaded files'
        inputs:
          targetType: 'inline'
          script: |
            Write-Host "Download contents:"
            gci -Path $(System.DefaultWorkingDirectory)/nuget -Recurse -Force
 
      - script: |
          choco install -y squid
        displayName: 'Setup Proxy (Squid)'

      - task: PowerShell@2
        displayName: 'Setup TPM Simulator (EXE)'
        inputs:
          targetType: 'inline'
          script: |
            Write-Host Start TPM Simulator
            Start $(Build.SourcesDirectory)\vsts\TpmSimulator\Simulator.exe

      - powershell: |
          Function IsWindows() 
          {
            return ([Environment]::OSVersion.Platform -eq [System.PlatformID]::Win32NT)
          }

          if (isWindows) 
          {
            Write-Host Start ETL logging
            logman create trace IotTrace -o iot.etl -pf tools/CaptureLogs/iot_providers.txt
            logman start IotTrace
          }

          Write-Host Add DevOps artifacts location as local NuGet source ($env:AZURE_IOT_LOCALPACKAGES)
          dotnet nuget add source $env:AZURE_IOT_LOCALPACKAGES -n "LocalPackages"

          Write-Host List all NuGet sources
          dotnet nuget list source
          
          $runTestCmd = "$(Build.SourcesDirectory)/build.ps1 -configuration Release -framework $(FRAMEWORK) -unitests"
          Invoke-Expression $runTestCmd

          $gateFailed = $LASTEXITCODE
          Write-Host "Test ended ($gateFailed)"

          if (isWindows) 
          {
            Write-Host Stop ETL logging
            logman stop IotTrace
            logman delete IotTrace
          }

          if ($gateFailed) 
          {
            Write-Error "Testing was not successful, exiting..."
            exit 1
          }
          else 
          {
            Write-Host "Testing was successful!"
            exit 0
          }      
        displayName: 'E2E Tests'
        env:
          # Environment variables for IoT Hub E2E tests
          IOTHUB_CONNECTION_STRING: $(IOTHUB-CONNECTION-STRING)
          IOTHUB_X509_DEVICE_PFX_CERTIFICATE: $(IOTHUB-X509-DEVICE-PFX-CERTIFICATE)
          IOTHUB_X509_CHAIN_DEVICE_NAME: $(IOTHUB-X509-CHAIN-DEVICE-NAME)
          IOTHUB_X509_CHAIN_DEVICE_PFX_CERTIFICATE: $(IOTHUB-X509-CHAIN-DEVICE-PFX-CERTIFICATE)
          IOTHUB_USER_ASSIGNED_MSI_RESOURCE_ID: $(IOTHUB-USER-ASSIGNED-MSI-RESOURCE-ID)

          # Environment variables for DPS E2E tests
          DPS_IDSCOPE: $(DPS-IDSCOPE)
          PROVISIONING_CONNECTION_STRING: $(PROVISIONING-CONNECTION-STRING)
          DPS_GLOBALDEVICEENDPOINT: $(DPS-GLOBALDEVICEENDPOINT)
          FAR_AWAY_IOTHUB_HOSTNAME: $(FAR-AWAY-IOTHUB-HOSTNAME)
          CUSTOM_ALLOCATION_POLICY_WEBHOOK: $(CUSTOM-ALLOCATION-POLICY-WEBHOOK)
          DPS_X509_PFX_CERTIFICATE_PASSWORD: $(DPS-X509-PFX-CERTIFICATE-PASSWORD)
          DPS_X509_GROUP_ENROLLMENT_NAME: $(DPS-X509-GROUP-ENROLLMENT-NAME)

          # Environment variables for Azure resources used for E2E tests (common)
          X509_CHAIN_ROOT_CA_CERTIFICATE: $(X509-CHAIN-ROOT-CA-CERTIFICATE)
          X509_CHAIN_INTERMEDIATE1_CERTIFICATE: $(X509-CHAIN-INTERMEDIATE1-CERTIFICATE)
          X509_CHAIN_INTERMEDIATE2_CERTIFICATE: $(X509-CHAIN-INTERMEDIATE2-CERTIFICATE)
          X509_CHAIN_INTERMEDIATE2_PFX_CERTIFICATE: $(X509-CHAIN-INTERMEDIATE2-PFX-CERTIFICATE)
          STORAGE_ACCOUNT_CONNECTION_STRING: $(STORAGE-ACCOUNT-CONNECTION-STRING)
          MSFT_TENANT_ID: $(MSFT-TENANT-ID)
          E2E_TEST_AAD_APP_CLIENT_ID: $(E2E-TEST-AAD-APP-CLIENT-ID)
          E2E_TEST_AAD_APP_CLIENT_SECRET: $(E2E-TEST-AAD-APP-CLIENT-SECRET)
          E2E_IKEY: $(E2E-IKEY)

          # Environment variables for the DevOps pipeline
          PROXY_SERVER_ADDRESS: 127.0.0.1:3128
          TARGET_BRANCH: $(System.PullRequest.TargetBranch)
          FRAMEWORK: $(FRAMEWORK)
          AZURE_IOT_LOCALPACKAGES: $(Build.SourcesDirectory)/bin/pkg

          # Environment variables for invalid certificate tests
          IOTHUB_DEVICE_CONN_STRING_INVALIDCERT: $(IOTHUB-DEVICE-CONN-STRING-INVALIDCERT)
          IOTHUB_CONN_STRING_INVALIDCERT: $(IOTHUB-CONN-STRING-INVALIDCERT)
          DPS_GLOBALDEVICEENDPOINT_INVALIDCERT: $(DPS-GLOBALDEVICEENDPOINT-INVALIDCERT)
          PROVISIONING_CONNECTION_STRING_INVALIDCERT: $(PROVISIONING-CONNECTION-STRING-INVALIDCERT)

          # Environment variables used by Log Analytics Workspace for Azure Security Center
          LA_AAD_APP_ID: $(LA-AAD-APP-ID)
          LA_AAD_APP_CERT_BASE64: $(LA-AAD-APP-CERT-BASE64)
          LA_WORKSPACE_ID: $(LA-WORKSPACE-ID)

      - task: CopyFiles@2
        displayName: 'Copy TRX files to the artifacts folder'
        inputs:
          SourceFolder: '$(Build.SourcesDirectory)'
          Contents: '**/*.trx'
          TargetFolder: '$(Build.ArtifactStagingDirectory)'
        condition: always()

      - task: CopyFiles@2
        displayName: 'Copy ETL files to the artifacts folder'
        inputs:
          SourceFolder: '$(Build.SourcesDirectory)'
          Contents: '**/*.etl'
          TargetFolder: '$(Build.ArtifactStagingDirectory)'

        condition: always()

      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifact: testresults_windows_$(FRAMEWORK)'
        inputs:
          ArtifactName: testresults_windows_$(FRAMEWORK)
        condition: always()

      - task: PublishTestResults@2
        displayName: 'Publish Test Results: $(FRAMEWORK)/**/*.trx'
        inputs:
          testRunner: VSTest
          testResultsFiles: '**/*.trx'
          testRunTitle: 'Windows Tests $(FRAMEWORK)'
          platform: Windows
          configuration: 'Debug UT + Release E2E ($(FRAMEWORK))'
        condition: always()

      - task: PowerShell@2
        displayName: 'Rename Packages for Partner Release Pipeline [azure-iot-sdk/net/pkgs_$file_date]'
        condition: eq(variables['NUGET_DROP'], 'true')
        inputs:
          targetType: 'inline'
          script: |
            Write-Host "Package contents:"
            gci $(Build.SourcesDirectory)/bin/pkg
            Write-Host " "
            Write-Host "\/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/"
            Write-Host "\/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/"
            Write-Host "The package name below is used in the partner release pipeline to identify files for signing"
            Write-Host " "
            Write-Host "azure-iot-sdk/net/pkgs_$file_date"
            Write-Host "/\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\"
            Write-Host "/\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\ /\"
            Write-Host " "
            Rename-Item $(Build.SourcesDirectory)/bin/pkg $(Build.SourcesDirectory)/bin/pkgs_$file_date
            Write-Host " "
            Write-Host "Package contents (renamed):"
            gci -Path $(Build.SourcesDirectory)/bin -Recurse -Force
